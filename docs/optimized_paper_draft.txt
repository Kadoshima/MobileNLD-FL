Q15固定小数点とSIMD並列化によるスマートフォンCPU向け非線形動力学解析の高速化
萩原　圭島†a)（学生員）　　　松浦　未来††（学生員）
菊澤　百々菜††（学生員）
Acceleration of Nonlinear Dynamics Analysis for Smartphone CPUs Using Q15 Fixed-Point Arithmetic and SIMD Parallelization
Kadoshima HAGIHARA†a), Student Member, Miku MATHURA†, Student Member and Momona KIKUZAWA†, Student Member
    †    中部大学大学院工学研究科情報工学専攻，愛知県
Department of Computer Science, Graduate School of Engineering, Chubu University, 1200 Matsumoto-cho, Kasugai-shi, Aichi, 487-8501 Japan
    E-mail: tp24011-1849@sti.chubu.ac.jp

あらまし　モバイル環境での非線形動力学解析は計算コストが課題となっている．本研究では，Q15固定小数点演算とSIMD並列化によりスマートフォンCPU向けLyapunov指数・DFA計算を21倍高速化するMobileNLD-FLシステムを提案する．CMSIS-DSP比較で1.5倍の性能向上を実現し，歩行解析への応用で実用性を検証した．
キーワード　非線形動力学解析，固定小数点演算，SIMD並列化，計算最適化，モバイルコンピューティング

1．まえがき
非線形動力学解析（NLD）は時系列信号の複雑性評価に有効だが，Lyapunov指数やDFA計算は浮動小数点演算を多用し，モバイル環境での実時間処理が困難である[15]．既存のCMSIS-DSP[19]等の汎用ライブラリは，NLD特有の演算パターンに最適化されておらず，スマートフォンの電力・性能制約下でボトルネックとなる．
本研究の目的は，Q15固定小数点演算とARM NEON SIMDによりNLD計算を最適化し，モバイル制約下での「速度-精度-電力効率」の最適バランスを実現することである．提案技術をMHEALTHデータセット[18]で評価し，歩行解析応用で実用性を示す．主な貢献は以下4点である：（N0）Q15+SIMD特化アーキテクチャによる21倍高速化，（N1）CMSIS-DSP比1.5倍の性能向上，（N2）個人化連合学習との統合設計，（N3）歩行疲労検知への応用実証．

図1  モバイル制約下でのNLD計算課題

2．関連研究と技術課題
2.1　既存NLD実装の限界
従来のNLD実装は，科学計算向けライブラリ（MATLAB，NumPy）の浮動小数点演算に依存し，モバイル環境で以下の課題がある：（1）FP32演算による電力消費増大，（2）逐次処理によるCPU利用率低下，（3）汎用ライブラリの演算パターン不適合．

2.2　CMSIS-DSPとの差別化
ARM社のCMSIS-DSP[19]は，固定小数点とSIMDを活用した数値計算ライブラリだが，汎用的な設計のため以下の非効率が存在する：（1）NLD特有の状態空間再構成に非対応，（2）距離計算の逐次処理，（3）メモリアクセスパターンの最適化不足．実測により，CMSIS-DSPのSIMD利用率は60%に留まることを確認した．本研究では，NLD専用パイプラインにより95%のSIMD利用率を達成し，1.5倍の性能向上を実現する．

2.3　モバイル機械学習との比較
Apple Core Motion[16]等のニューラルネットワークアプローチは高速だが，ブラックボックス性により生理学的解釈が困難である．本手法は解釈可能性（α指数，λ値）を保持しつつ，計算効率を向上させる点で差別化される．

3. 提案技術
3.1　システム設計（N0：Q15+SIMD特化アーキテクチャ）
提案するMobileNLD-FLは，以下3層構造で構成される：（1）Q15変換層：浮動小数点信号を15ビット固定小数点に変換，（2）SIMD並列化層：ARM NEON命令で距離・累積計算を並列化，（3）NLD計算層：LyE/DFA専用アルゴリズムで解析実行．

3.1.1　Q15固定小数点最適化
入力信号x(t)をQ15形式x_q15に変換し，整数演算で処理する：
x_q15 = round(x × 2^15)
これにより乗算誤差を2^-15以下に抑制し，浮動小数点ユニットを回避して電力効率を向上させる．

3.1.2　SIMD並列化設計
ARM NEON命令を活用し，4並列ベクトル演算でスループットを向上：
・距離計算：vmul+vadd でユークリッド距離を並列化
・累積和：vext+vadd で時系列積算を高速化
・線形フィット：vfma命令で最小二乗を最適化

3.2　NLD専用アルゴリズム（N1：CMSIS-DSP比1.5倍性能向上）
3.2.1　Lyapunov指数計算
Rosenstein法[15]を基に，状態空間再構成後の距離発散を追跡：
λ = (1/t) ln(d(t)/d(0))
CMSIS-DSPの汎用距離関数に対し，本手法は近傍探索をSIMD化し，メモリ局所性を改善することで高速化を実現．

Q15量子化誤差解析により，Lyapunov指数の誤差上界を導出：
|Δλ| ≤ 3√(δ²_log/N) < 0.0033 < 0.01
ここで，δ_log = √m・2ε_q/d_min，ε_q = 2^-15，m=5（埋め込み次元）．この誤差は臨床的に許容範囲内である．

3.2.2　DFA計算
Peng法[6]による変動関数F(s)の計算を最適化：
F(s) = √(1/N Σ[y(k)-y_fit(k)]²)
ボックス分割とトレンド除去をパイプライン化し，CMSIS-DSP対比でメモリ帯域を30%削減．

DFA α指数の誤差上界：
|Δα| ≤ 2k_maxε_q/(N√n_boxes) < 0.0001 < 0.01
累積和の量子化誤差が線形回帰で平均化され，高精度を維持．

3.3　個人化連合学習統合（N2）
プライバシー保護のため，Flower[20]フレームワークと統合したPFL-AEアーキテクチャを設計．共有エンコーダで特徴抽出，個人固有デコーダで異常検知を実現し，NLD特徴量（α，λ）を入力とする10次元オートエンコーダを構築．

図2  MobileNLD-FLシステムアーキテクチャ

4.　実験評価
4.1　実験設定
MHEALTHデータセット[18]（10名，12活動，50Hz IMU）を使用し，以下の比較実験を実施：
・ベースライン：FP32 MATLAB実装（1050ms）
・比較対象：CMSIS-DSP Q15実装
・提案手法：MobileNLD-FL Q15+SIMD実装
評価指標：処理時間，電力効率（nJ/MAC），精度（RMSE vs FP32），CPU利用率

4.2　性能評価結果（N0,N1の検証）
提案手法はFP32比21倍高速化（50ms vs 1050ms），CMSIS-DSP比1.5倍性能向上を実現．電力効率は2.3倍改善（5nJ/MAC vs 11.5nJ/MAC），精度劣化はRMSE 2%以下（LyE: 1.5%，DFA: 1.8%）に抑制．

理論解析との比較では，21倍高速化は理論値21.9倍の95.9%に相当し，極めて高い効率を達成．図3のベンチマーク結果から，CMSIS-DSPのSIMD利用率60%に対し，本手法は95%を実現．メモリ帯域は2.5GB/sから1.2GB/sへ52%削減され，電力効率向上に寄与した．

図3  性能比較（処理時間・電力効率・精度）

4.3　連合学習評価（N2の検証）
PFL-AEアーキテクチャで5-fold交差検証を実施．NLD特徴量（α，λ）を用いた個人化モデルは，FedAvgベースライン比でAUC 0.09向上（0.82 vs 0.73）を達成．通信効率は1/10に削減され，プライバシー保護と性能を両立．

5.　応用実証（N3：歩行疲労検知）
5.1　実機検証実験
iPhone 13にMobileNLD-FLを実装し，歩行疲労検知の実証実験を実施．被験者5名で15分間のトレッドミル歩行を記録し，自覚的疲労度（RPE）との相関を評価．

5.2　結果
α指数の疲労相関はr=0.75，λ値との複合指標でr=0.83を達成．リアルタイム処理（3秒窓）で応答性を確認し，既存NNベース手法の解釈困難性を克服．

図4  歩行疲労検知の実証結果

6. 考察とまとめ
本研究では，Q15固定小数点とSIMD並列化によるモバイルNLD最適化技術を提案し，以下の成果を得た：（N0）21倍高速化の実現，（N1）CMSIS-DSP比1.5倍性能向上，（N2）個人化連合学習との統合，（N3）歩行解析応用での実用性検証．これらの技術的貢献により，モバイル環境でのリアルタイムNLD解析が実用化レベルに到達した．

今後の課題として，Android NDK対応による汎用性向上，より大規模データセットでの評価拡張が挙げられる．ソースコードのオープンソース化により，モバイルコンピューティング分野への貢献を目指す．

文　　　献
    [1]    著者名，"標題，"雑誌名，巻，号，pp.を付けて始め-終りのページ，月年．
    [2]    山上一郎，山下二郎，"パラメトリック増幅器，"信学論 (B), vol.J62-B, no.1, pp.20-27, Jan. 1979.
    [3]    W. Rice, A.C. Wine, and B.D. Grain, "Diffusion of impurities during epitaxy," Proc. IEEE, vol.52, no.3, pp.284-290, March 1964.
    [6]    H. Tong, Nonlinear Time Series: A Dynamical System Approach, J.B. Elsner, ed., Oxford University Press, Oxford, 1990.
    [15]   M. Rosenstein, J. Collins, and C. De Luca, "A practical method for calculating largest Lyapunov exponents from small data sets," Physica D, vol.65, pp.117-134, 1993.
    [16]   Apple Inc., "Core Motion Framework," https://developer.apple.com/documentation/coremotion
    [18]   L. Banos et al., "mHealthDroid: A Novel Framework for Agile Development of Mobile Health Applications," Proc. IWAAL, pp.91-98, 2014.
    [19]   ARM Ltd., "CMSIS-DSP Software Library," https://github.com/ARM-software/CMSIS_5
    [20]   D. Beutel et al., "Flower: A Friendly Federated Learning Research Framework," arXiv:2007.14390, 2020.

付　　録
1．ソースコードについて
MobileNLD-FLの全ソースコードはGitHubで公開予定：
https://github.com/mobile-nld-fl/MobileNLD-FL

（XXXX年XX月XX日受付，XXXX年XX月XX日再受付）
 
Abstract
Nonlinear dynamics analysis (NLD) on mobile devices faces computational bottlenecks due to intensive floating-point operations. This paper presents MobileNLD-FL, a system that accelerates Lyapunov exponent and DFA calculations on smartphone CPUs using Q15 fixed-point arithmetic and SIMD parallelization, achieving 21× speedup. Our NLD-specific optimizations outperform CMSIS-DSP by 1.5×, with RMSE ≤2%. We validate the system through gait analysis applications using the MHEALTH dataset.

key words: nonlinear dynamics analysis, fixed-point arithmetic, SIMD parallelization, mobile computing, computational optimization